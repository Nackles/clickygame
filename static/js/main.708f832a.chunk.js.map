{"version":3,"sources":["components/Clickable.js","App.js","serviceWorker.js","index.js"],"names":["Clickable","props","react_default","a","createElement","Button","onClick","id","className","src","img","alt","character","width","height","App","state","combo","highest","characters","beenClicked","gotClicked","idClicked","_this","includes","console","log","setState","shuffle","push","sort","Math","random","this","_this2","Container","Jumbotron","map","components_Clickable","key","clicked","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"guCAWeA,SAPG,SAAAC,GAChB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,QAAS,kBAAIL,EAAMK,QAAQL,EAAMM,KAAKC,UAAU,eACtDN,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,IAAKH,GAAIN,EAAMM,GAAII,IAAKV,EAAMW,UAAWC,MAAO,IAAKC,OAAQ,iBC8FpEC,6MA3FbC,MAAQ,CACNC,MAAO,EACPC,QAAS,EACTC,aACAC,YAAa,MAYfC,WAAa,SAAAC,GAGPC,EAAKP,MAAMI,YAAYI,SAASF,IAClCG,QAAQC,IAAI,kCAERH,EAAKP,MAAMC,MAAQM,EAAKP,MAAME,SAChCK,EAAKI,SAAS,CACZT,QAASK,EAAKP,MAAMC,QAIxBM,EAAKI,SAAS,CACZV,MAAO,EACPG,YAAa,KAGfG,EAAKK,YAELH,QAAQC,IAAI,mDAEZH,EAAKP,MAAMI,YAAYS,KAAKP,GAE5BC,EAAKI,SAAS,CACZP,YAAaG,EAAKP,MAAMI,YACxBH,MAAOM,EAAKP,MAAMC,MAAQ,IAG5BM,EAAKK,cAKTA,QAAU,WAERL,EAAKP,MAAMG,WAAWW,KAAK,kBAAMC,KAAKC,SAAW,KAEjDT,EAAKI,SAAS,CACZR,WAAYI,EAAKP,MAAMG,iGA7CzBc,KAAKL,2CAkDE,IAAAM,EAAAD,KACP,OACE/B,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACEjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,KACElC,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,2FAEYF,EAAAC,EAAAC,cAAA,2CAEZF,EAAAC,EAAAC,cAAA,mBACU6B,KAAKjB,MAAMC,MADrB,aACsCgB,KAAKjB,MAAME,UAInDhB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,kDACdyB,KAAKjB,MAAMG,WAAWkB,IAAI,SAAAzB,GACzB,OACEV,EAAAC,EAAAC,cAACkC,EAAD,CACEC,IAAK3B,EAAUL,GACfA,GAAIK,EAAUL,GACdG,IAAKE,EAAUF,IACf8B,SAAS,EACTlC,QAAS4B,EAAKb,wBAnFVoB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.708f832a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport './clickstyle.css';\r\n\r\nconst Clickable = props => {\r\n  return (\r\n    <Button onClick={()=>props.onClick(props.id)} className=\"flex-spacer\">\r\n      <img src={props.img} id={props.id} alt={props.character} width={100} height={100} />\r\n    </Button>\r\n  );\r\n};\r\nexport default Clickable;\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./mystyle.css\";\nimport React, { Component } from \"react\";\nimport { Jumbotron, Container } from \"reactstrap\";\nimport Clickable from \"./components/Clickable.js\";\nimport characters from \"./characters.json\";\n\n// Extend App as Component to use stateful variables\nclass App extends Component {\n  // Initializing display variables and character cards from JSON\n  state = {\n    combo: 0,\n    highest: 0,\n    characters,\n    beenClicked: []\n  };\n\n  // Shuffle card order on instantiation.\n  componentDidMount() {\n    this.shuffle();\n  }\n\n  // When a Clickable gets clicked...\n  /* Check if its ID is included in beenClicked and if...\n  /** false: Push its ID to beenClicked\n  /** true: trigger a game over and reset the game */\n  gotClicked = idClicked => {\n    // If beenClicked[] includes that Clickable's ID, game over: (reset combo, set highest)\n    // Otherwise, push that ID to beenClicked[], increment combo, and shuffle()\n    if (this.state.beenClicked.includes(idClicked)) {\n      console.log(\"ID has been clicked: GAME OVER\");\n      // If that combo is greater than highest, record new highest\n      if (this.state.combo > this.state.highest) {\n        this.setState({\n          highest: this.state.combo\n        });\n      }\n      // Always set combo to zero and reset beenClicked[]\n      this.setState({\n        combo: 0,\n        beenClicked: []\n      });\n      // Reset the board with a shuffle!\n      this.shuffle();\n    } else {\n      console.log(\"ID has not been clicked: PUSHING TO beenClicked\");\n      // Recording card has been clicked\n      this.state.beenClicked.push(idClicked);\n      // Rendering information to client and updating combo\n      this.setState({\n        beenClicked: this.state.beenClicked,\n        combo: this.state.combo + 1\n      });\n      // Shuffle cards!\n      this.shuffle();\n    }\n  };\n\n  // We're going to shuffle our cards a lot.\n  shuffle = () => {\n    // Randomly!\n    this.state.characters.sort(() => Math.random() - 0.5);\n    // Making sure the change will be reflected on the client's side.\n    this.setState({\n      characters: this.state.characters\n    });\n  };\n\n  // Show a Jumbotron with instructions and a randomly sorted array of character images to click.\n  render() {\n    return (\n      <Container>\n        <Jumbotron>\n          <h1>Bojack Paparazzi</h1>\n          <p>\n            Clicking an image gives you a point, but only if you haven't clicked\n            it yet... <p>Try to click all 12 in a row!</p>\n          </p>\n          <p>\n            Combo: {this.state.combo} Highest: {this.state.highest}\n          </p>\n        </Jumbotron>\n        {/* For each character, create a card and track its clicked state */}\n        <div className=\"d-inline-flex justify-content-center flex-wrap\">\n        {this.state.characters.map(character => {\n          return (\n            <Clickable\n              key={character.id}\n              id={character.id}\n              img={character.img}\n              clicked={false}\n              onClick={this.gotClicked}\n            />\n          );\n        })}\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}